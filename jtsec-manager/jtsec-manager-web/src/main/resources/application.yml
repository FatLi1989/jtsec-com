#数据源配置
spring:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.jdbc.Driver
    username: root
    password: root
    url: jdbc:mysql://47.95.0.193:3306/jtsec_manager?useUnicode=true&characterEncoding=utf-8
  # 下面为连接池的补充设置，应用到上面所有数据源中
  # 初始化大小，最小，最大
    initialSize: 5
    minIdle: 5
    maxActive: 20
  # 配置获取连接等待超时的时间
    maxWait: 60000
  # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
  # 配置一个连接在池中最小生存的时间，单位是毫秒
    minEvictableIdleTimeMillis: 300000
    validationQuery: SELECT 1 FROM DUAL
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
  # 打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: true
    maxPoolPreparedStatementPerConnectionSize: 20
  # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    filters: stat,wall, logback
  # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
  # 合并多个DruidDataSource的监控数据
  #spring.datasource.useGlobalDataSourceStat=true
  redis:
    host: 47.95.0.193
    # Redis服务器连接端口
    port: 12345
    password: liyanpeng
    jedis:
      pool:
     # 连接池最大连接数（使用负值表示没有限制）
        max-active: 100
     # 连接池中的最小空闲连接
        min-idle: 0
     # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1
     # 连接池中的最大空闲连接
        max-idle: 100
        max-total: 200
    # 连接超时时间（毫秒）
    timeout: 60ms
  dubbo:
    protocol:
      name: dubbo
    application:
      name: live-dubbo-consumer
    registry:
      address: zookeeper://47.95.0.193:2181
    qos:
      port: 20221
#检查服务是否可用默认为true，不可用时抛出异常，阻止spring初始化，为方便部署，
#可以改成false 连接超时时间120000ms 超时连接次数为2
    consumer:
      timeout: 120000
      check: false
      retries: 2
  kafka:
    bootstrap-servers: 47.95.0.193:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      retries: 0
      batch-size: 4096
      linger : 1
      buffer-memory: 40960
  profiles:
    active: dev
#mybaties扫描配置
mybatis:
    #实体类所做包
    type-aliases-package: com.jtsec.manager.pojo.model
    #mapper.xml所在位置
    mapper-locations: classpath:mapper/*.xml
pagehelper:
  helperDialect: mysql
  reasonable: true
  supportMethodsArguments: true
  params: count=countSql
# 日志logback
logging:
  level:
     com:
      jtsec:
       manager:
        mapper: debug
management:
  endpoints:
    web:
      exposure:
        include: "*"